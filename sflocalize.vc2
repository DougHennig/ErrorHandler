*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="sflocalize.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS sflocalize AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: cresourcesfolder_assign
		*m: getadditionalresources		&& Gets additional resources from XML files
		*m: getlanguages		&& Fills an array with supported languages
		*m: getlocalizedstring		&& Returns the localized string for the specified ID
		*m: openresourcetable		&& Opens the resource table
		*p: calias		&& The alias used for the resource file
		*p: clanguage		&& The language to use for localized resources
		*p: cresourcesfolder		&& The folder for additional resource files
		*p: cresourcetable		&& The name and path for the resource table
		*p: _memberdata
	*</DefinedPropArrayMethod>

	PROTECTED calias
	calias = 		&& The alias used for the resource file
	clanguage = English		&& The language to use for localized resources
	cresourcesfolder = 		&& The folder for additional resource files
	cresourcetable = 		&& The name and path for the resource table
	Name = "sflocalize"
	Width = 17
	_memberdata = <VFPData>
		<memberdata name="calias" type="property" display="cAlias"/>
		<memberdata name="clanguage" type="property" display="cLanguage"/>
		<memberdata name="cresourcesfolder" type="property" display="cResourcesFolder"/>
		<memberdata name="cresourcesfolder_assign" type="method" display="cResourcesFolder_Assign"/>
		<memberdata name="cresourcetable" type="property" display="cResourceTable"/>
		<memberdata name="getadditionalresources" type="method" display="GetAdditionalResources"/>
		<memberdata name="getlanguages" type="method" display="GetLanguages"/>
		<memberdata name="getlocalizedstring" type="method" display="GetLocalizedString"/>
		<memberdata name="openresourcetable" type="method" display="OpenResourceTable"/>
		</VFPData>
	
	PROCEDURE cresourcesfolder_assign
		lparameters tcValue
		This.cResourcesFolder = tcValue
		This.GetAdditionalResources(tcValue)
		
	ENDPROC

	PROCEDURE getadditionalresources		&& Gets additional resources from XML files
		lparameters tcFolder
		local lcFolder, ;
			laFiles[1], ;
			lnFiles, ;
			lcAlias, ;
			lnSelect, ;
			lnSize, ;
			lnI, ;
			lcFile, ;
			lcLanguage, ;
			lcCursor, ;
			lcResource, ;
			lcValue, ;
			loException
		lcFolder = addbs(tcFolder)
		if directory(lcFolder) and This.OpenResourceTable()
			lnFiles  = adir(laFiles, lcFolder + '*.xml')
			lcAlias  = This.cAlias
			lnSelect = select()
			lnSize   = fsize('RESOURCE', lcAlias)
			for lnI = 1 to lnFiles
				lcFile     = laFiles[lnI, 1]
				lcLanguage = juststem(lcFile)
					&& the file is named after the language e.g. french.xml
				if type(lcAlias + '.' + lcLanguage) <> 'M'
					select *, cast('' as M) as &lcLanguage ;
						from (lcAlias) ;
						into cursor (lcAlias) readwrite
					index on upper(RESTYPE + RESOURCE) tag RESOURCE
				endif type(lcAlias + '.' + lcLanguage) <> 'M'
				try
					lcCursor = sys(2015)
					xmltocursor(lcFolder + lcFile, lcCursor, 512)
					scan
						lcResource = trim(KEY)
						lcValue    = trim(VALUE)
						if seek('S' + padr(upper(lcResource), lnSize), lcAlias)
							replace &lcLanguage with lcValue, ;
								INACTIVE with .F. in (lcAlias)
						else
							insert into (lcAlias) ;
								(RESTYPE, RESOURCE, ENGLISH, &lcLanguage) ;
								values ('S', lcResource, lcResource, lcValue)
						endif seek('S' ...
					endscan
					use
				catch to loException
				endtry
			next lnI
			select (lnSelect)
		endif directory(lcFolder) ...
		
	ENDPROC

	PROCEDURE getlanguages		&& Fills an array with supported languages
		lparameters taArray, ;
			tlAllLanguages
		local lnLanguages, ;
			lnSelect, ;
			laFields[1], ;
			lnFields, ;
			lnI, ;
			lcField
		lnLanguages = 0
		if This.OpenResourceTable()
			lnSelect = select()
			select (This.cAlias)
			lnFields = afields(laFields)
			for lnI = 1 to lnFields
				lcField = proper(laFields[lnI, 1])
				if not inlist(lcField, 'Restype', 'Resource', 'Whereused', ;
					'Inactive', 'Usedin', 'Modified', 'Notes')
					locate for not empty(&lcField)
					if found() or tlAllLanguages
						lnLanguages = lnLanguages + 1
						dimension taArray[lnLanguages]
						taArray[lnLanguages] = lcField
					endif found() ...
				endif not inlist(lcField ...
			next lnI
			asort(taArray)
			select (lnSelect)
		endif This.OpenResourceTable()
		return lnLanguages
		
	ENDPROC

	PROCEDURE getlocalizedstring		&& Returns the localized string for the specified ID
		lparameters tcID, ;
			tlStripHotkey, ;
			tlSpaces
		local lcReturn, ;
			loException as Exception
		with This
			lcReturn = tcID
			do case
				case not .OpenResourceTable()
				case seek('S' + padr(upper(tcID), fsize('RESOURCE', .cAlias)), ;
					.cAlias, 'RESOURCE')
					try
						lcReturn = evaluate(.cAlias + '.' + .cLanguage)
					catch to loException
						lcReturn = ''
					endtry
					if empty(lcReturn)
						lcReturn = evaluate(.cAlias + '.ENGLISH')
					endif empty(lcReturn)
					if '<<' $ lcReturn and '>>' $ lcReturn
						lcReturn = textmerge(lcReturn)
					endif '<<' $ lcReturn ...
					if tlStripHotkey
						lcReturn = strtran(lcReturn, '\<')
					endif tlStripHotkey
					if tlSpaces and left(lcReturn, 1) <> ' '
						lcReturn = ' ' + lcReturn
					endif tlSpaces ...
					if tlSpaces and right(lcReturn, 1) <> ' '
						lcReturn = lcReturn + ' '
					endif tlSpaces ...
					lcReturn = strtran(lcReturn, '\n', chr(10))
			endcase
		endwith
		return lcReturn
		
	ENDPROC

	PROTECTED PROCEDURE openresourcetable		&& Opens the resource table
		local llReturn, ;
			lnSelect, ;
			loException as Exception, ;
			lcFolder
		with This
			lnSelect = select()
			do case
				case not empty(.cAlias) and used(.cAlias)
					llReturn = .T.
				case not empty(.cResourceTable) and file(.cResourceTable)
					.cAlias = sys(2015)
					try
						select * from (.cResourceTable) into cursor (.cAlias) readwrite
						index on upper(RESTYPE + RESOURCE) tag RESOURCE
					catch to loException
					endtry
					use in select(juststem(.cResourceTable))
					llReturn = used(.cAlias)
				otherwise
					.cAlias = sys(2015)
					create cursor (.cAlias) (RESTYPE C(1), RESOURCE C(60), ENGLISH M)
					index on upper(RESTYPE + RESOURCE) tag RESOURCE
					llReturn = .T.
			endcase
			select (lnSelect)
		endwith
		return llReturn
		
	ENDPROC

ENDDEFINE
